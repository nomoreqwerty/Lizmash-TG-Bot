use crate::common::keyboard::{MakeKeyboard, Menu};
use crate::database::*;
use crate::defines::{TeloxideResult};
use crate::profile::{Profile, ProfileBuilder};
use crate::user::{MyUserId, User};
use std::fmt::{Debug};
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::ParseMode;

pub async fn finish_profile_creation(
    bot: Bot,
    db: Arc<Database>,
    user: &User,
    profile_builder: ProfileBuilder,
) -> TeloxideResult {
    let profile = profile_builder.build();

    if db.get_user(*user.id()).await.is_none() {
        db.add_user(user).await;
    }

    db.add_profile(&profile).await;

    bot.send_message(*profile.id(), "–ì–æ—Ç–æ–≤–æ. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
        .reply_markup(Menu::keyboard())
        .await?;

    conversation::send_profile(bot, *profile.id(), &profile).await?;

    Ok(())
}

pub async fn next_suggestion(db: Arc<Database>, user_id: impl Into<MyUserId>) -> Option<Profile> {
    let user_id = user_id.into();

    let user_profile = db.get_profile(user_id).await.unwrap();
    let viewed_profiles = db.get_user_views(user_id).await;

    let searching_filter = user_profile.search_filter(&viewed_profiles);

    db.filter_profile(searching_filter).await
}

/// Returns [Profile] of a user who liked user with the given _user_id_
///
/// Returns _None_ if there is no record of the user's like in the database,
/// or if the user does not have a profile
pub async fn next_profile_who_have_liked(
    db: Arc<Database>,
    user_id: impl Into<MyUserId>,
) -> Option<Profile> {
    let like = db.get_like_to_user(user_id.into()).await?;
    db.get_profile(*like.from()).await
}

pub async fn check_for_match(
    db: Arc<Database>,
    from: impl Into<MyUserId>,
    to: impl Into<MyUserId>,
) -> CheckForMatchResult {
    let (from, to) = (from.into(), to.into());

    db.find_like(from, to)
        .await
        .map_or(CheckForMatchResult::DontMatch, |_| {
            CheckForMatchResult::Match
        })
}

pub mod text {
    pub const PROFILE_EDIT_MODE: &str = "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã";
}

#[derive(Debug, Default, Clone)]
pub enum CheckForMatchResult {
    Match,
    #[default]
    DontMatch,
}

pub mod structs {
    use super::*;

    #[derive(Clone, Debug)]
    pub struct SearchData {
        pub user_profile: Profile,
        pub profile_id: MyUserId,
    }
}

pub mod conversation {
    use super::*;
    
    use std::error::Error;
    use teloxide::types::InlineKeyboardMarkup;

    pub async fn bot_works_only_in_chats(
        bot: Bot,
        msg: Message,
    ) -> TeloxideResult {
        bot.send_message(msg.chat.id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            .await?;
        Ok(())
    }

    pub async fn send_username_is_needed(bot: Bot, msg: Message) -> TeloxideResult {
        bot.parse_mode(ParseMode::Html)
            .send_message(
                msg.chat.id,
                "–°–æ–∂–∞–ª–µ—é, –Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n\
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
            )
            .await?;
        Ok(())
    }

    pub async fn send_menu(bot: Bot, user_id: impl Into<MyUserId>) -> TeloxideResult {
        bot.send_message(user_id.into(), "üè† –ú–µ–Ω—é")
            .reply_markup(Menu::keyboard())
            .await?;
        Ok(())
    }

    pub async fn default_start(
        bot: Bot,
        user_id: impl Into<MyUserId>,
    ) -> TeloxideResult {
        let user_id = user_id.into();

        bot.parse_mode(ParseMode::Html)
            .send_message(
                user_id,
                "<b>–ü—Ä–∏–≤–µ—Ç</b> üëã\n\
                    \n\
                    –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            )
            .await?;

        Ok(())
    }

    pub async fn send_profile_with_keyboard_inline(
        bot: Bot,
        user_id: impl Into<MyUserId>,
        profile: &Profile,
        keyboard: InlineKeyboardMarkup,
    ) -> TeloxideResult {
        let message = send_profile(bot.clone(), user_id.into(), profile).await?;

        bot.edit_message_reply_markup(message.chat.id, message.id)
            .reply_markup(keyboard)
            .await?;

        Ok(())
    }

    #[inline]
    pub async fn send_profile(
        bot: Bot,
        user_id: impl Into<MyUserId>,
        profile: &Profile,
    ) -> Result<Message, Box<dyn Error + Send + Sync>> {
        let message = bot
            .send_media_group(user_id.into(), profile.to_mediagroup())
            .await?
            .first()
            .unwrap()
            .clone();
        Ok(message)
    }

    #[inline]
    pub async fn send_no_suggestion(bot: Bot, user_id: impl Into<MyUserId>) -> TeloxideResult {
        bot.send_message(
            user_id.into(),
            "–ê–Ω–∫–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        )
        .reply_markup(Menu::keyboard())
        .await?;
        Ok(())
    }

    #[inline]
    pub async fn send_likes_are_over_now_search(
        bot: Bot,
        user_id: impl Into<MyUserId>,
    ) -> TeloxideResult {
        bot.send_message(user_id.into(), "–õ–∞–π–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
            .await?;
        Ok(())
    }
}

pub mod keyboard {
    use crate::callback::{CallbackData, ProfileField};
    use crate::profile::Sex;
    
    use teloxide::types::{
        ButtonRequest, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, KeyboardMarkup,
    };
    use text::*;
    use crate::profile;

    pub mod text {
        pub const BOY: &str = "–ü–∞—Ä–µ–Ω—å";
        pub const GIRL: &str = "–î–µ–≤—É—à–∫–∞";
        pub const LOCATION: &str = "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
        pub const WANT_A_BOY: &str = "–ü–∞—Ä–Ω—è";
        pub const WANT_A_GIRL: &str = "–î–µ–≤—É—à–∫—É";
        pub const WHATEVER: &str = "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã";
        pub const DEAF_GIRL: &str = "–ì–ª—É—Ö–∞—è";
        pub const DEAF_BOY: &str = "–ì–ª—É—Ö–æ–π";
        pub const HEARING_IMPAIRED_GIRL: &str = "–°–ª–∞–±–æ—Å–ª—ã—à–∞—â–∞—è";
        pub const HEARING_IMPAIRED_BOY: &str = "–°–ª–∞–±–æ—Å–ª—ã—à–∞—â–∏–π";
        pub const HEARING_GIRL: &str = "–°–ª—ã—à–∞—â–∞—è";
        pub const HEARING_BOY: &str = "–°–ª—ã—à–∞—â–∏–π";
        pub const LEAVE_EMPTY: &str = "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º";
        pub const WATCH_PROFILES: &str = "üöÄ –ü–æ–∏—Å–∫";
        pub const MY_PROFILE: &str = "‚≠ê –ü—Ä–æ—Ñ–∏–ª—å";
        pub const LIKE: &str = "‚ù§Ô∏è";
        pub const DISLIKE: &str = "üëé";
        pub const MENU: &str = "üè†";
        pub const WHO_LIKES_ME: &str = "üì© –õ–∞–π–∫–∏";
        pub const EDIT: &str = "‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å";
        pub const FINISH: &str = "–ó–∞–∫–æ–Ω—á–∏—Ç—å";
        pub const EDIT_NAME: &str = "‚úí –ò–º—è";
        pub const EDIT_AGE: &str = "üìè –í–æ–∑—Ä–∞—Å—Ç";
        pub const EDIT_CITY: &str = "üèò –ì–æ—Ä–æ–¥";
        pub const EDIT_HEARING_LEVEL: &str = "üëÇ –£—Ä–æ–≤–µ–Ω—å —Å–ª—É—Ö–∞";
        pub const EDIT_DESCRIPTION: &str = "üìù –û–ø–∏—Å–∞–Ω–∏–µ";
        pub const EDIT_PHOTO: &str = "üñº –§–æ—Ç–æ";
    }

    pub trait MakeKeyboard {
        fn keyboard() -> KeyboardMarkup;
    }

    pub trait MakeKeyboardInline {
        fn keyboard_inline() -> InlineKeyboardMarkup;
    }

    pub struct SetHearingLevel;

    impl SetHearingLevel {
        pub fn keyboard(user_sex: Sex) -> InlineKeyboardMarkup {
            match user_sex {
                Sex::Male => InlineKeyboardMarkup::new([
                    [InlineKeyboardButton::callback(DEAF_BOY, CallbackData::SHR { hearing_level: profile::HearingLevel::CompletelyDeaf })],
                    [InlineKeyboardButton::callback(HEARING_IMPAIRED_BOY, CallbackData::SHR { hearing_level: profile::HearingLevel::HearingImpaired })],
                    [InlineKeyboardButton::callback(HEARING_BOY, CallbackData::SHR { hearing_level: profile::HearingLevel::Hearing })],
                ]),
                Sex::Female => InlineKeyboardMarkup::new([
                    [InlineKeyboardButton::callback(DEAF_GIRL, CallbackData::SHR { hearing_level: profile::HearingLevel::CompletelyDeaf })],
                    [InlineKeyboardButton::callback(HEARING_IMPAIRED_GIRL, CallbackData::SHR { hearing_level: profile::HearingLevel::HearingImpaired })],
                    [InlineKeyboardButton::callback(HEARING_GIRL, CallbackData::SHR { hearing_level: profile::HearingLevel::Hearing })],
                ])
            }
        }
    }

    pub struct EditProfile;

    impl EditProfile {
        pub fn keyboard() -> InlineKeyboardMarkup {
            InlineKeyboardMarkup::new([
                [InlineKeyboardButton::callback(EDIT_NAME, CallbackData::EPD { profile_field: ProfileField::Name })],
                [InlineKeyboardButton::callback(EDIT_AGE, CallbackData::EPD { profile_field: ProfileField::Age })],
                [InlineKeyboardButton::callback(EDIT_CITY, CallbackData::EPD { profile_field: ProfileField::City })],
                [InlineKeyboardButton::callback(EDIT_HEARING_LEVEL, CallbackData::EPD { profile_field: ProfileField::HearingLevel })],
                [InlineKeyboardButton::callback(EDIT_DESCRIPTION, CallbackData::EPD { profile_field: ProfileField::Description })],
                [InlineKeyboardButton::callback(EDIT_PHOTO, CallbackData::EPD { profile_field: ProfileField::Photo })],
                [InlineKeyboardButton::callback(FINISH, CallbackData::FED)],
            ])
        }
    }

    pub struct LookingAtProfiles;

    impl MakeKeyboard for LookingAtProfiles {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([[
                KeyboardButton::new(LIKE),
                KeyboardButton::new(DISLIKE),
                KeyboardButton::new(MENU),
            ]])
            .resize_keyboard(true)
        }
    }

    pub struct EnterProfileEditingMode;

    impl EnterProfileEditingMode {
        pub fn keyboard() -> InlineKeyboardMarkup {
            InlineKeyboardMarkup::new([
                [InlineKeyboardButton::callback(EDIT, CallbackData::EPEM)]
            ])
        }
    }

    pub struct RequestLocation;

    impl MakeKeyboard for RequestLocation {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([[KeyboardButton::new(LOCATION).request(ButtonRequest::Location)]])
                .resize_keyboard(true)
                .one_time_keyboard(true)
        }
    }

    pub struct SelectSex;

    impl MakeKeyboard for SelectSex {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([[KeyboardButton::new(BOY), KeyboardButton::new(GIRL)]])
                .resize_keyboard(true)
                .one_time_keyboard(true)
        }
    }

    pub struct SelectWantToMeet;

    impl MakeKeyboard for SelectWantToMeet {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([
                vec![
                    KeyboardButton::new(WANT_A_BOY),
                    KeyboardButton::new(WANT_A_GIRL),
                ],
                vec![KeyboardButton::new(WHATEVER)],
            ])
            .resize_keyboard(true)
            .one_time_keyboard(true)
        }
    }

    pub struct HearingLevel;

    impl HearingLevel {
        pub fn keyboard(user_sex: Sex) -> KeyboardMarkup {
            let markup = match user_sex {
                Sex::Male => KeyboardMarkup::new([
                    [KeyboardButton::new(DEAF_BOY)],
                    [KeyboardButton::new(HEARING_IMPAIRED_BOY)],
                    [KeyboardButton::new(HEARING_BOY)],
                ]),
                Sex::Female => KeyboardMarkup::new([
                    [KeyboardButton::new(DEAF_GIRL)],
                    [KeyboardButton::new(HEARING_IMPAIRED_GIRL)],
                    [KeyboardButton::new(HEARING_GIRL)],
                ]),
            };
            markup.resize_keyboard(true).one_time_keyboard(true)
        }
    }

    pub struct LeaveEmptyDescription;

    impl MakeKeyboardInline for LeaveEmptyDescription {
        fn keyboard_inline() -> InlineKeyboardMarkup {
            InlineKeyboardMarkup::new([[InlineKeyboardButton::callback(LEAVE_EMPTY, CallbackData::LED)]])
        }
    }

    impl MakeKeyboard for LeaveEmptyDescription {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([[KeyboardButton::new(LEAVE_EMPTY)]])
                .one_time_keyboard(true)
                .resize_keyboard(true)
        }
    }

    pub struct Menu;

    impl MakeKeyboard for Menu {
        fn keyboard() -> KeyboardMarkup {
            KeyboardMarkup::new([[
                KeyboardButton::new(WATCH_PROFILES),
                KeyboardButton::new(MY_PROFILE),
                KeyboardButton::new(WHO_LIKES_ME),
            ]])
            .resize_keyboard(true)
        }
    }
}
